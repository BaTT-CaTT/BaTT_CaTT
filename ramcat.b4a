Version=6.8
NumberOfModules=22
Module1=klo
Module2=settings
Module3=hw
Module4=Starter
Module5=webhost
Module6=sys
Module7=cool
Module8=Batut
Module9=pman
Module10=wait
Module11=Charts
Module12=set2
Module13=datacount
Module14=SetAnimation
Module15=ClsSlidingSideBar
Module16=XmlViewEx
Module17=SettingUI
Module18=StateManager
Module19=DBUtils
Module20=KeyValueStore
Module21=ClsCheckList
Module22=ClsExplorer
Build1=Default,com.batcat
ManifestCode=AddManifestText(~\n~<uses-sdk android:minSdkVersion="18" android:targetSdkVersion="22"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>~\n~	<uses-permission       android:name="android.permission.KILL_BACKGROUND_PROCESSES"/>~\n~<uses-permission ~\n~android:name="android.launcher.permission.INSTALL_SHORTCUT"/>~\n~<uses-permission ~\n~ android:name="android.permission.CLEAR_APP_CACHE"/>~\n~<uses-permission ~\n~ android:name="android.permission.GET_PACKAGE_SIZE"/>~\n~<uses-permission ~\n~ android:name="android.permission.GET_TASKS"/>~\n~<uses-permission~\n~  android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>~\n~<uses-permission~\n~  android:name="android.permission.READ_EXTERNAL_STORAGE"/>~\n~<uses-permission~\n~  android:name="android.permission.WRITE_SECURE_SETTINGS"/>~\n~<uses-permission~\n~ android:name="android.permission.PACKAGE_USAGE_STATS"/>~\n~<uses-permission~\n~  android:name="android.permission.BATTERY_STATS"/>~\n~<uses-permission~\n~  android:name="android.permission.MODIFY_PHONE_STATE"/>~\n~<uses-permission~\n~  android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>~\n~<uses-permission~\n~  android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>~\n~<uses-permission~\n~  android:name="android.permission.SET_ALWAYS_FINISH"/>~\n~<uses-permssion~\n~  android:name="android.permission.UPDATE_DEVICE_STATS"/>~\n~<uses-permission~\n~  android:name="android.permission.BIND_APPWIDGET"/>~\n~  )~\n~AddApplicationText(<service android:name="com.frozendevs.cache.cleaner.model.CleanerService"/>)~\n~SetActivityAttribute(Main, "android:excludeFromRecents", "false")~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~'SetApplicationAttribute(android:largeHeap,"true")~\n~SetApplicationAttribute(android:theme, "@style/Theme.AppCompat")~\n~SetApplicationAttribute(android:theme, "@style/MyAppTheme")~\n~'SetApplicationAttribute(android:theme, "@android:style/Theme.Holo")~\n~~\n~CreateResource(values, theme.xml,~\n~<resources>~\n~    <style name="MyAppTheme" parent="Theme.AppCompat.Light.NoActionBar">~\n~        <item name="colorPrimary">#37474F</item>~\n~        <item name="colorPrimaryDark">#37474F</item>~\n~        <item name="colorAccent">#76FF03</item>~\n~        <item name="windowNoTitle">true</item>~\n~        <item name="windowActionBar">false</item>~\n~    </style>~\n~</resources>~\n~)~\n~
IconFile=
NumberOfFiles=56
File1=1.bal
File2=2.bal
File3=4.bal
File4=5.bal
File5=6.bal
File6=6_sub.bal
File7=7.bal
File8=8.bal
File9=Accept128.png
File10=alarm-clock.png
File11=Android.png
File12=app.png
File13=Bar-chart48.png
File14=Battery Icons - Colorful 128px (1).png
File15=Battery Icons - Colorful 128px (10).png
File16=Battery Icons - Colorful 128px (14).png
File17=Battery Icons - Colorful 128px (16).png
File18=Battery Icons - Colorful 128px (2).png
File19=Battery Icons - Colorful 128px (3).png
File20=Battery Icons - Colorful 128px (4).png
File21=Battery Icons - Colorful 128px (5).png
File22=Battery Icons - Colorful 128px (6).png
File23=Battery Icons - Colorful 128px (7).png
File24=Battery Icons - Colorful 128px (8).png
File25=Battery Icons - Colorful 128px (9).png
File26=Battery icons - Colorful 64px (32).png
File27=Battery Icons - White 64px (28).png
File28=Battery Icons - White 64px (35).png
File29=Battery Icons - White 64px (40).png
File30=Battery.png
File31=bclean.png
File32=bclean_shadow.png
File33=Chart.png
File34=Control.png
File35=icon_batcat.png
File36=idea.png
File37=info.png
File38=menu-1.png
File39=multiply-1.png
File40=OpenSans.ttf
File41=Power.png
File42=repeat-1.png
File43=restart.png
File44=Rss.png
File45=settings-1.png
File46=shutdown.png
File47=soff.png
File48=son.png
File49=squareprogressbar.jar
File50=squareprogressbar.xml
File51=success.png
File52=sulo_log99.png
File53=tabs.png
File54=Tag.png
File55=warning.png
File56=wid.bal
NumberOfLibraries=42
Library1=core
Library2=phone
Library3=reflection
Library4=oslibrary
Library5=json
Library6=customtoast
Library7=animation
Library8=randomaccessfile
Library9=sql
Library10=cache
Library11=cachecleaner
Library12=dialogs
Library13=javaobject
Library14=activitymanager
Library15=storage
Library16=msshowtips
Library17=scrollview2d
Library18=materialcolors
Library19=materialcircleprogress
Library20=appcompat
Library21=xmlsax
Library22=xmllayoutbuilder
Library23=nineoldandroids
Library24=progressrndbtn
Library25=circleprogressmaster
Library26=net
Library27=network
Library28=collectionsextra
Library29=fontawesome
Library30=fft
Library31=animationplus
Library32=msos
Library33=osstats
Library34=coolanimview
Library35=ahpreferenceactivity
Library36=creditsroll
Library37=ss_slidingmenustandard
Library38=circlebutton
Library39=intent id
Library40=preferenceactivity
Library41=stringutils
Library42=loadingviews
@EndOfDesignText@
'BaTT CaTT source Project 
'Copyrights D.Trojan(trOw) and SM/Media ©2017
'Main Code Module created by trOw
 #Region  Project Attributes 
	#ApplicationLabel: BaTT CaTT(Build 282)
	#VersionCode: 283
	#VersionName: 1.9.9.8
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: portrait
	#CanInstallToExternalStorage: false
	#BridgeLogger:false
#End Region
	#AdditionalRes: C:\Users\trow\Documents\Apps\Worground\RAM_Cat\res
	#Extends: android.support.v7.app.AppCompatActivity

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: True
#End Region


Sub Process_Globals
	Dim pak As PackageManager
	Private cs As CSBuilder
	Dim sql As SQL
	Dim t1 As Timer
	Dim cc As CacheCleaner
End Sub

Sub Globals
	Private ProgressBar1 As ProgressBar
	Private ra As OperatingSystem
	Dim device As PhoneEvents
	Dim ct As CustomToast
	Private Label1,Label2,Label3,Label4,lk As Label
	Private lv2,lvMenu As ListView
	Dim args(1) As Object
	Dim Obj1, Obj2, Obj3 As Reflector
	Dim la,la1,la2 As Label
	Dim ima As ImageView
    Dim icon As BitmapDrawable
	Dim logo As Bitmap
	Dim bat As Batut
	Private CheckBox1 As CheckBox
	Private CheckBox2 As CheckBox
	Dim temp,level1 As String
	Private Panel2,panel3,lip,smlp As Panel
	Dim kvs,kvs2,kvs3,kvs4,kvs4sub,kvsvolt,kvstemp,kvstime,kvdata As KeyValueStore
	Dim optmap As Map 
	Private Label5 As Label
	Dim proc As List
	Private Panel1 As Panel
	Private showtip As MSShowTipsBuilder
	Private slm As ClsSlidingSideBar
	Dim cas As Int
	Dim size,flags As Int
	Dim Types(1), name,packName,date,time,l,ramsize As String
	Dim List,list1,list2,list3,list4,list5,list6,list7,list8,list9,phlis,Lis,setlist,datalist,logfile As List
	Dim cd2,cd As CustomDialog2
	Dim FakeActionBar  As Panel
	Dim sd,sdi As Bitmap
	Private ACToolBarLight1 As ACToolBarLight
	Private ToolbarHelper As ACActionBar
	Private c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16 As Int
	Dim mcl As MaterialColors
	Dim Mclist,ramlist As List
	Dim cat As Cache
	Dim fbc As ColorDrawable
	Dim xml As XmlLayoutBuilder
	Private ImageView1 As ImageView
	Private apm As ArcProgressMaster
	Dim nativeMe As JavaObject
	'Private 'Button4 As Button
	'Private ims3 As ImageView
	Dim volt,root1 As String 
	Dim ffiles,ffolders As List
	Dim xMSOS As MSOS
	Dim xOSStats As OSStats
	Private pbe2 As ACButton
	Dim listview1 As ListView
	'Private clv As ColoringLoadingView
	'Private cb2 As Circlebutton
	'Private 'b1 As Button
	Dim dir1 As String = File.DirDefaultExternal&"/mnt/cache/store"
	Private lv3 As ListView
	Dim catlist As List 
	Private prboost As Button
	Private lvbat As LVBattery
	Private info_but As Button
	Private Label6 As Label
End Sub 

Sub Activity_Create(FirstTime As Boolean)
	Activity.LoadLayout("1")
	'######### Main / Menu Settings ##########
	Activity.Title=pak.GetApplicationLabel("com.batcat")&" - "&pak.GetVersionName("com.batcat")
	'################SlidingMenu Settings######################
	ToolbarHelper.Initialize
	'ToolbarHelper.ShowUpIndicator = False 'set to true to show the up arrow
	ToolbarHelper.Hide
	'######### Sub initializes ###############
	device.Initialize("device")
	t1.Initialize("t1",1000)
	ra.Initialize("ra")
	bat.Initialize
	ct.Initialize
	cc.initialize("cc")
	listview1.Initialize("listview1")
	listview1.Enabled=True
	List.Initialize
	logfile.Initialize
	list1.Initialize
	list2.Initialize
	list3.Initialize
	list4.Initialize
	list5.Initialize
	list6.Initialize
	list7.Initialize
	list8.Initialize
	list9.Initialize
	phlis.Initialize
	datalist.Initialize
	setlist.Initialize
	lv2.Initialize("lv2")
	panel3.Initialize("panel3")
	smlp.Initialize("smlp")
	lip.Initialize("lip")
	'setp.Initialize("setp")
	Lis.Initialize
	proc.Initialize
	lk.Initialize("lk")
	optmap.Initialize
	la.Initialize("la")
	la1.Initialize("la1")
	la2.Initialize("la2")
	ramlist.Initialize
	ffiles.Initialize
	ffolders.Initialize
	catlist.Initialize
	'######################################################Activity Colors######################
	c1=mcl.md_light_blue_A400
	c2=mcl.md_amber_A400
	c3=mcl.md_white_1000
	c4=mcl.md_teal_A400
	c5=mcl.md_deep_purple_A400
	c6=mcl.md_red_A700
	c7=mcl.md_indigo_A400
	c8=mcl.md_blue_A400
	c9=mcl.md_orange_A700
	c10=mcl.md_grey_600
	c11=mcl.md_green_A400
	c12=mcl.md_black_1000
	c13=mcl.md_light_green_A400
	c14=mcl.md_cyan_A400
	c15=mcl.md_blue_grey_400
	c16=mcl.md_light_blue_A400
	'##########OS Stats#############################################################
	xOSStats.Initialize(400, 50, Me, "myStats")
	
	'####################################Extra Initials###########################################
	panel3.AddView(lk,10,5,80%x,50%y)
	volt=bat.BatteryInformation(7)/1000
	temp=bat.BatteryInformation(6)/10
	level1=bat.BatteryInformation(0)
	lv2.FastScrollEnabled=True
	logo.InitializeSample(File.DirAssets, "sulo_log99.png",48,48)
	panel3.Color=Colors.Transparent
	lip.Color=Colors.ARGB(255,77,79,79)
	lip.Elevation=50dip
	lip.AddView(lv2,1dip,1dip,-1,-1)
	cd2.AddView(listview1,-1,-1)
	smlp.Enabled=True
	showtip.Initialize("showtip")
	ima.Initialize("ima")
	ima.Bitmap=LoadBitmap(File.DirAssets,"icon_batcat.png")
	panel3.AddView(ima,50,150,450,250)
'	ab1.Color=mcl.md_blue_grey_500
'	ab1.Text="Boost"
	
	
	
	
	'#######date Settings###############
	date=DateTime.Date(DateTime.Now)
	time=DateTime.Time(DateTime.Now)
	 
	
	'######Label Settings##############
	Label3.Text="Ver. "&pak.GetVersionName("com.batcat")

	
	
	'################menu init#########################
	Dim BarSize As Int: BarSize = 60dip
	FakeActionBar.Initialize("")
	FakeActionBar.Color =  Colors.Transparent
	Activity.AddView(FakeActionBar, 0, 0, 100%x, BarSize)
	Activity.AddView(smlp,0,5dip,100%x,65%y)
	slm.Initialize(smlp, 250dip, 1, 1, 100, 200)
	slm.ContentPanel.Color = Colors.Transparent
	slm.Sidebar.Background = slm.LoadDrawable("popup_top_dark")'("popup_top_bright")
	slm.SetOnChangeListeners(Me, "Menu_onFullyOpen", "Menu_onFullyClosed", "Menu_onMove")
	lvMenu.Initialize("lvMenu")
	Dim lvm1,lvm2 As Label
	lvm1=lvMenu.TwoLinesAndBitmap.Label
	lvm2=lvMenu.TwoLinesAndBitmap.SecondLabel
	lvm1.TextColor = Colors.White
	lvm1.textsize=14
	lvm2.textsize=12
	lvm2.textcolor=Colors.LightGray
	lvMenu.TwoLinesAndBitmap.ImageView.Height=42dip
	lvMenu.TwoLinesAndBitmap.ImageView.Width=42dip
	lvMenu.AddTwoLinesAndBitmap2("System Info","Detail Phone Info",LoadBitmap(File.DirAssets,"Tag.png"),4)
	lvMenu.AddTwoLinesAndBitmap2("Statistic","Battery Cyclus",LoadBitmap(File.DirAssets,"chart.png"),3)
	lvMenu.AddTwoLinesAndBitmap2("Power","OS Power Menu",LoadBitmap(File.DirAssets,"Battery.png"),2)
	lvMenu.AddTwoLinesAndBitmap2("Appmanager","Tool zur Appverwaltung",LoadBitmap(File.DirAssets,"Android.png"),6)
	lvMenu.AddTwoLinesAndBitmap2("Settings","Options Menü",LoadBitmap(File.DirAssets,"Control.png"),0)
	lvMenu.AddTwoLinesAndBitmap2("Info","Version Info, über BC..",LoadBitmap(File.DirAssets, "Rss.png"),5)
	lvMenu.AddTwoLinesAndBitmap2("Exit","Schließt BC",LoadBitmap(File.DirAssets,"Power.png"),1)
	lvMenu.TwoLinesAndBitmap.ItemHeight=95
	lvMenu.Color = Colors.Transparent
	lvMenu.ScrollingBackgroundColor = Colors.Transparent
	slm.Sidebar.AddView(lvMenu, 10dip,9dip, -1, -1)
	slm.EnableSwipeGesture(True,400,1)
	smlp.BringToFront
	slm.Sidebar.BringToFront
	lvMenu.BringToFront
	lv2.Enabled=True
	prboost.SendToBack
	'######################################################DATA STORE###########################
	kvs.Initialize(File.DirDefaultExternal, "datastore")
	kvs2.Initialize(File.DirDefaultExternal, "datastore_2")
	kvs3.Initialize(File.DirDefaultExternal, "datastore_3")
	kvs4.Initialize(File.DirDefaultExternal, "datastore_4")
	kvs4sub.Initialize(File.DirDefaultExternal, "datastore_sub_4")
	kvstemp.Initialize(File.DirDefaultExternal, "datastore_temp")
	kvsvolt.Initialize(File.DirDefaultExternal, "datastore_volt")
	kvstime.Initialize(File.DirDefaultExternal,"datastore_time")
	kvdata.Initialize(File.DirDefaultExternal,"datastore_data")

	'######################################################DATA STORE###########################
	
	logo.Initialize(File.DirAssets,"icon_batcat.png")
	
	Label2.Text= temp &"°C"
	Label4.Text= Round2(volt,1) &" V"
	
	'####### first start Use #################
	If FirstTime Then
		show_tip
		Activity.Color=c10
		kvs4.PutSimple("9",c10)
		slm.OpenSidebar
		'b1.SetVisibleAnimated(80,False)
		lv3.AddTwoLinesAndBitmap("No Data","noch keine Werte vorhanden",LoadBitmap(File.DirAssets,"Bar-chart48.png"))
		If File.Exists(File.DirDefaultExternal&"/mnt/cache","cdata.txt") Then
			
		Else
			sql.Initialize(File.DirRootExternal, "1.db", True)
			File.MakeDir(File.DirDefaultExternal, "mnt/cache")
			File.MakeDir(File.DirDefaultExternal, "mnt/data")
			File.MakeDir(File.DirDefaultExternal, "mnt/cache/store")
			File.WriteList(File.DirDefaultExternal&"/mnt/cache","sv.txt",list4)
			File.WriteList(File.DirDefaultExternal&"/mnt/cache","cdata.txt",catlist)
			File.WriteList(File.DirDefaultExternal&"/mnt/cache","fn.txt",list1)
			File.WriteList(File.DirDefaultExternal&"/mnt/cache","APnames.txt",list3)
			File.WriteString(File.DirDefaultExternal&"/mnt/cache","lvl.txt",level1)
			File.WriteString(File.DirDefaultExternal&"/mnt/cache","volt.txt","5")
			File.WriteString(File.DirDefaultExternal&"/mnt/data",ra.Device&"_"&ra.Brand&".txt",ra.Device&"|"&ra.Serial&"|"&ra.SDK)
			File.WriteList(File.DirDefaultExternal&"/mnt/cache","pn1.txt",Lis)
			File.WriteList(File.DirDefaultExternal&"/mnt/cache","settings.txt",setlist)
			File.WriteList(File.DirDefaultExternal&"/mnt/cache","proc.txt",proc)
			File.Writelist(File.DirDefaultExternal&"/mnt/cache","log.txt",logfile)
			File.WriteString(File.DirDefaultExternal&"/mnt/cache","lvl2.txt","0")
			File.WriteMap(File.DirDefaultExternal&"/mnt/cache","smap1.txt",optmap)
			ToastMessageShow("Datein für den ersten-Start vorbereitet! "&date&", "&time,False)
		End If
	Else
		ToastMessageShow("Willkommen",False)
	End If

	'######################################################Colors End###########################
	'######################################################Battery View Settings###########################
	'ra.setLowMemory
	apm.FinishedStrokeColor=mcl.md_light_green_A400
	apm.Color=Colors.Transparent
	apm.UnfinishedStrokeColor=Colors.ARGB(190,255,255,255)
	apm.TextColor=Colors.Black
	apm.TextSize=55
	apm.StrokeWidth=12dip
	apm.ArcAngle=290
	
	
	'############################################Start Subs###########################
	Dim lil1,lil2 As Label
	lil1=lv3.TwoLinesAndBitmap.Label
	lil2=lv3.TwoLinesAndBitmap.SecondLabel
	'listview1.TwoLinesAndBitmap.ImageView.Height=50dip
	lil1.TextColor=mcl.md_black_1000
	lil1.TextSize=16
	lil2.TextColor=mcl.md_white_1000
	lil2.TextSize=14
	
	
	store_check
	label_text
	value_check
End Sub

Sub Activity_Resume
	xOSStats.StartStats
	store_check
	value_check
End Sub

Sub Activity_Pause (UserClosed As Boolean)
	xOSStats.EndStats
End Sub

Sub show_tip	
	showtip.setDelay(400)
	prboost.SetVisibleAnimated(100,False)
		showtip.setCircleColor(Colors.ARGB(195,255,255,255))
		showtip.setTitle(pak.GetApplicationLabel("com.batcat")).build
		showtip.build.setDescription("Swipe nach links zum öffnen und nach rechts zum schließen des Menü´s")
		showtip.setTarget(smlp).build
		showtip.show
End Sub

Sub show_2
	slm.OpenSidebar
	prboost.SetVisibleAnimated(100,False)
	showtip.setDelay(400)
	showtip.setCircleColor(Colors.ARGB(195,255,255,255))
	showtip.setTitle(pak.GetApplicationLabel("com.batcat")).build
	showtip.build.setDescription("Tippe hier um dein Akku zu Boosten...")
	showtip.show
End Sub
Sub Menu_onFullyOpen
	lvMenu.BringToFront
	smlp.BringToFront
	slm.Sidebar.BringToFront
	lvMenu.BringToFront
	ProgressBar1.SendToBack
	
	prboost.SetVisibleAnimated(100,False)
	Label1.SetLayout(40%x,40%y,40%x,90dip)
	Label2.SetVisibleAnimated(100,False)
	Label4.SetVisibleAnimated(100,False)


End Sub
Sub Menu_onFullyClosed
	'''b1.Visible=True
	''B.Color=mcl.md_light_green_A400
	Label1.SetLayout(40%x,40%y,40%x,90dip)
	'Button4.TextSize=18
	Label2.SetVisibleAnimated(100,True)
	Label4.SetVisibleAnimated(100,True)
	''b1.SetLayoutAnimated(100,110dip,55%y,95dip,90dip)
	prboost.SetVisibleAnimated(100,True)
	prboost.BringToFront
	Label6.BringToFront
End Sub

Sub Menu_onMove (IsOpening As Boolean)
	If IsOpening=True Then
		''b1.SetLayoutAnimated(100,1dip,50%y,5%x,180dip)
		prboost.SetVisibleAnimated(100,False)
	End If 
End Sub

Sub read_log
	logfile=File.ReadList(File.DirDefaultExternal&"/mnt/cache/","log.txt")
	For h = 0 To logfile.Size-1
		Log(logfile.Get(h))
		
	Next
	InputList(logfile,"Event log:",1)
End Sub

Sub value_check
	lv3.Clear
	For Each d As String In kvstime.ListKeys
		Log(d)
		lv3.AddTwoLinesAndBitmap2("Info:",d,LoadBitmap(File.DirAssets,"idea.png"),0)
	Next
End Sub
Sub lv3_ItemClick (Position As Int, Value As Object)
	If Value=0 Then 
		read_log
	End If
End Sub
Sub rebound
	CallSubDelayed(pman,"app_manage")
End Sub

Sub prboost_Click
	Button4_Click
End Sub

Sub store_check
	c1=mcl.md_light_blue_A400
	c2=mcl.md_amber_A400
	c3=mcl.md_white_1000
	c4=mcl.md_teal_A400
	c5=mcl.md_deep_purple_A400
	c6=mcl.md_red_A700
	c7=mcl.md_indigo_A400
	c8=mcl.md_blue_A400
	c9=mcl.md_orange_A700
	c10=mcl.md_grey_600
	c11=mcl.md_green_A400
	c12=mcl.md_black_1000
	c13=mcl.md_light_green_A400
	c14=mcl.md_cyan_A400
	c15=mcl.md_blue_grey_400
	c16=mcl.md_light_blue_A400
	If kvs4sub.ContainsKey("off") Then
		StopService(Starter)
	End If
	If kvs4.ContainsKey("0")Then
		Log("AC_true->1")
		Activity.Color=c1
		apm.TextColor=Colors.ARGB(200,255,255,255)
		Label4.TextColor=Colors.ARGB(200,255,255,255)
		Label5.TextColor=Colors.ARGB(200,255,255,255)
		Label3.TextColor=Colors.ARGB(200,255,255,255)
		apm.UnfinishedStrokeColor=Colors.ARGB(190,255,255,255)
		apm.FinishedStrokeColor=mcl.md_light_green_A400
		''Button4.Color=Colors.ARGB(150,255,255,255)
	End If
	If kvs4.ContainsKey("1")Then
		Log("AC_true->2")
		Activity.Color=c2
		apm.TextColor=Colors.ARGB(200,255,255,255)
		Label4.TextColor=Colors.ARGB(200,255,255,255)
		Label5.TextColor=Colors.ARGB(200,255,255,255)
		Label3.TextColor=Colors.ARGB(200,255,255,255)
		apm.UnfinishedStrokeColor=Colors.ARGB(190,255,255,255)
		apm.FinishedStrokeColor=mcl.md_light_green_A400
		''Button4.Color=Colors.ARGB(150,255,255,255)

	End If
	If kvs4.ContainsKey("2")Then
		Log("AC_true->3")
		Activity.Color=c3
		apm.TextColor=Colors.Black
		Label4.TextColor=Colors.Black
		Label5.TextColor=Colors.Black
		Label3.TextColor=Colors.Black
		Label2.TextColor=Colors.Black
		Label1.TextColor=Colors.Black
		apm.UnfinishedStrokeColor=mcl.md_light_blue_100
		apm.FinishedStrokeColor=mcl.md_light_green_A400
	End If
	If kvs4.ContainsKey("3")Then
		Log("AC_true->4")
		Activity.Color=c4
		apm.TextColor=Colors.Black
		Label4.TextColor=Colors.Black
		Label5.TextColor=Colors.Black
		Label3.TextColor=Colors.Black
		apm.UnfinishedStrokeColor=mcl.md_light_green_100
		apm.finishedStrokeColor=Colors.ARGB(190,255,255,255)
		''Button4.Color=Colors.ARGB(150,255,255,255)
	End If
	If kvs4.ContainsKey("4")Then
		Log("AC_true->4")
		Activity.Color=c5
		apm.TextColor=Colors.ARGB(200,255,255,255)
		Label4.TextColor=Colors.ARGB(200,255,255,255)
		Label5.TextColor=Colors.ARGB(200,255,255,255)
		Label3.TextColor=Colors.ARGB(200,255,255,255)
		apm.UnfinishedStrokeColor=Colors.ARGB(190,255,255,255)
		apm.FinishedStrokeColor=mcl.md_light_green_A400
		''Button4.Color=Colors.ARGB(150,255,255,255)
	End If
	If kvs4.ContainsKey("5")Then
		Log("AC_true->4")
		Activity.Color=c6
		apm.TextColor=Colors.ARGB(200,255,255,255)
		Label4.TextColor=Colors.ARGB(200,255,255,255)
		Label5.TextColor=Colors.ARGB(200,255,255,255)
		Label3.TextColor=Colors.ARGB(200,255,255,255)
		apm.UnfinishedStrokeColor=Colors.ARGB(190,255,255,255)
		apm.FinishedStrokeColor=mcl.md_light_green_A400
		''Button4.Color=Colors.ARGB(150,255,255,255)
	End If
	If kvs4.ContainsKey("6")Then
		Log("AC_true->4")
		Activity.Color=c7
		apm.TextColor=Colors.ARGB(200,255,255,255)
		Label4.TextColor=Colors.ARGB(200,255,255,255)
		Label5.TextColor=Colors.ARGB(200,255,255,255)
		Label3.TextColor=Colors.ARGB(200,255,255,255)
		apm.UnfinishedStrokeColor=Colors.ARGB(190,255,255,255)
		apm.FinishedStrokeColor=mcl.md_light_green_A400
		''Button4.Color=Colors.ARGB(150,255,255,255)
	End If
	If kvs4.ContainsKey("7")Then
		Log("AC_true->4")
		Activity.Color=c8
		apm.TextColor=Colors.Black
		Label4.TextColor=Colors.Black
		Label5.TextColor=Colors.Black
		Label3.TextColor=Colors.Black
		apm.UnfinishedStrokeColor=Colors.ARGB(190,255,255,255)
		apm.FinishedStrokeColor=mcl.md_light_green_A400
		''Button4.Color=Colors.ARGB(150,255,255,255)
	End If
	If kvs4.ContainsKey("8")Then
		Log("AC_true->4")
		Activity.Color=c9
		apm.TextColor=Colors.ARGB(200,255,255,255)
		Label4.TextColor=Colors.ARGB(200,255,255,255)
		Label5.TextColor=Colors.ARGB(200,255,255,255)
		Label3.TextColor=Colors.ARGB(200,255,255,255)
		apm.UnfinishedStrokeColor=Colors.ARGB(190,255,255,255)
		apm.FinishedStrokeColor=mcl.md_light_green_A400
		''Button4.Color=Colors.ARGB(150,255,255,255)
	End If
	If kvs4.ContainsKey("9")Then
		Log("AC_true->4")
		Activity.Color=c10
		apm.TextColor=Colors.ARGB(200,255,255,255)
		Label4.TextColor=Colors.ARGB(200,255,255,255)
		Label5.TextColor=Colors.ARGB(200,255,255,255)
		Label3.TextColor=Colors.ARGB(200,255,255,255)
		apm.UnfinishedStrokeColor=Colors.ARGB(190,255,255,255)
		apm.FinishedStrokeColor=mcl.md_light_blue_A400
		''Button4.Color=Colors.ARGB(150,255,255,255)
	End If
	If kvs4.ContainsKey("10")Then
		Log("AC_true->4")
		Activity.Color=c11
		apm.TextColor=Colors.ARGB(200,255,255,255)
		apm.FinishedStrokeColor=Colors.ARGB(200,255,255,255)
		apm.UnfinishedStrokeColor=Colors.ARGB(100,255,255,255)
		Label4.TextColor=Colors.ARGB(200,255,255,255)
		Label5.TextColor=Colors.ARGB(200,255,255,255)
		Label3.TextColor=Colors.ARGB(200,255,255,255)
		apm.FinishedStrokeColor=mcl.md_light_green_A400
		''Button4.Color=mcl.md_lime_A400
	End If
	If kvs4.ContainsKey("11")Then
		Log("AC_true->4")
		Activity.Color=c12
		apm.TextColor=Colors.ARGB(200,255,255,255)
		Label4.TextColor=Colors.ARGB(200,255,255,255)
		Label5.TextColor=Colors.ARGB(200,255,255,255)
		Label3.TextColor=Colors.ARGB(200,255,255,255)
		Label1.TextColor=Colors.ARGB(200,255,255,255)
		Label2.TextColor=Colors.ARGB(200,255,255,255)
		apm.UnfinishedStrokeColor=Colors.ARGB(190,255,255,255)
		apm.FinishedStrokeColor=mcl.md_light_green_A400
		''Button4.Color=mcl.md_lime_A400
		''Button4.TextColor=Colors.Black
		panel3.Color=Colors.ARGB(100,255,255,255)
	
	End If
	If kvs4.ContainsKey("12")Then
		Log("AC_true->4")
		Activity.Color=c13
		apm.TextColor=Colors.ARGB(200,255,255,255)
		Label4.TextColor=Colors.ARGB(200,255,255,255)
		Label5.TextColor=Colors.ARGB(200,255,255,255)
		Label3.TextColor=Colors.ARGB(200,255,255,255)
		apm.UnfinishedStrokeColor=Colors.ARGB(190,255,255,255)
		apm.FinishedStrokeColor=mcl.md_amber_100
		panel3.Color=Colors.ARGB(150,0,0,0)
		''Button4.Color=Colors.ARGB(150,255,255,255)
	End If
	If kvs4.ContainsKey("13")Then
		Log("AC_true->4")
		Activity.Color=c14
		apm.TextColor=Colors.Black
		Label4.TextColor=Colors.Black
		Label5.TextColor=Colors.Black
		Label3.TextColor=Colors.Black
		apm.UnfinishedStrokeColor=Colors.ARGB(190,255,255,255)
		''Button4.Color=mcl.md_lime_A400
	End If
	If kvs4.ContainsKey("14")Then
		Log("AC_true->4")
		Activity.Color=c15
		apm.TextColor=Colors.Black
		Label4.TextColor=Colors.Black
		Label5.TextColor=Colors.Black
		Label3.TextColor=Colors.Black
		apm.UnfinishedStrokeColor=Colors.ARGB(190,255,255,255)
		apm.FinishedStrokeColor=mcl.md_light_green_A400
		''Button4.Color=Colors.ARGB(150,255,255,255)
	End If
	Activity.Invalidate
End Sub

Sub slem1_click
	slem_click
End Sub

Sub slem_click
	If slm.IsSidebarVisible Then
		slm.CloseSidebar
	Else
	
		slm.OpenSidebar
		''Button4.Visible=False
	End If
End Sub


Sub lvMenu_ItemClick (Position As Int, Value As Object)
	 If Value = 0 Then 
	 	opt_click
		slm.CloseSidebar
		SetAnimation.setanimati("extra_in", "extra_out")
	End If
	If Value=1 Then 
		cl_click
		slm.CloseSidebar
		SetAnimation.setanimati("extra_in", "extra_out")
	End If
	If Value=2 Then
		Dim i As Intent
		i.Initialize( "android.intent.action.POWER_USAGE_SUMMARY", "")
		slm.CloseSidebar
		SetAnimation.setanimati("extra_in", "extra_out")
		StartActivity(i)
	End If
	If Value=3 Then
		StartActivity(klo)
		SetAnimation.setanimati("extra_in", "extra_out")
		slm.CloseSidebar
	End If
	If Value=4 Then
		StartActivity(sys)
		slm.CloseSidebar
		SetAnimation.setanimati("extra_in", "extra_out")
	End If
	If Value=5 Then
		StartActivity(wait)
		slm.CloseSidebar
		SetAnimation.setanimati("extra_in", "extra_out")
	End If
	If Value=6 Then 
		StartActivity(pman) 
		slm.CloseSidebar
		SetAnimation.setanimati("extra_in", "extra_out")
	End If
End Sub

Sub stat_me
	StartActivity(klo)
	SetAnimation.setanimati("extra_in", "extra_out")
End Sub

Sub sy_click
	StartActivity(sys)
	SetAnimation.setanimati("extra_in", "extra_out")
End Sub

Sub st_click
	StartActivity(klo)
	SetAnimation.setanimati("extra_in", "extra_out")
End Sub

Sub cb2_Click
	cc.CleanCache
	StartService(webhost)
	StartActivity(cool)
	SetAnimation.setanimati("extra_in", "extra_out")
End Sub

Sub Button4_Click
	'SetAnimation.setanimat="'Button4"
	StartService(webhost)
	StartActivity(cool)
	SetAnimation.setanimati("extra_in", "extra_out")
	
End Sub

Sub opt_click
StartActivity(settings)
	SetAnimation.setanimati("extra_in", "extra_out")
End Sub

Sub b1_Click
	StartService(webhost)
	StartActivity(cool)
	SetAnimation.setanimati("extra_in", "extra_out")
	
End Sub

Sub ab1_Click
	Button4_Click
End Sub
Sub button2_Click
	StartActivity(pman)
	SetAnimation.setanimati("extra_in", "extra_out")
End Sub 

Sub info_but_Click
	StartActivity(wait)
	SetAnimation.setanimati("extra_in", "extra_out")
End Sub
Sub label_text
	lk.TextSize=13
	lk.TextColor=Colors.Black
	lk.Text="Version: "&pak.GetVersionName("com.batcat")&", Integer: "&pak.GetVersionCode("com.batcat")&". Coded in 'Basic' and 'Sun Java OpenSource' by D. Trojan, published by SuloMedia™ www.battcatt.bplaced.net for Recent News & Updates. All Rights Reserved BC ©2017 "&pak.GetApplicationLabel("com.batcat")
End Sub

Sub pci_click
	cd.AddView(panel3,-1,350)
	cd.Show("About Batt-Cat: ","","Ok","",LoadBitmap(File.DirAssets, "Rss.png"))
	If Not (cd2.Response=DialogResponse.CANCEL) Then
		ct.ShowBitmap("©2017 SuloMedia™",30,Gravity.BOTTOM,0,0,logo)
	End If
End Sub

Sub myStats_Update(CPUEfficiency() As Float, RAMUsage As Float)
	ProgressBar1.Progress=RAMUsage
	Label5.Text=NumberFormat2(RAMUsage, 0, 0, 0, False) & "%"& " - "&FormatFileSize(RAMUsage*1024*1024*10)
End Sub
	
Sub CalcSize(Folder As String, recursive As Boolean) As Long
	Dim size1 As Long
	For Each f As String In File.ListFiles(Folder)
		If recursive Then
			If File.IsDirectory(Folder, f) Then
				size1 = size1 + CalcSize(File.Combine(Folder, f),recursive)
			End If
		End If
		size1 = size1 + File.Size(Folder, f)
	Next
	Return size1
End Sub

Private Sub CopyFolder(Source As String, targetFolder As String)
	If File.Exists(targetFolder, "") = False Then File.MakeDir(targetFolder, "")
	For Each f As String In File.ListFiles(Source)
		If File.IsDirectory(Source, f) Then
			CopyFolder(File.Combine(Source, f), File.Combine(targetFolder, f))
			Continue
		End If
		File.Copy(Source, f, targetFolder, f)
	Next
End Sub

Sub ReadDir(folder As String, recursive As Boolean)
	'Log("ReadDir("&folder&")")
	Dim lst As List = File.ListFiles(folder)
	For i = 0 To lst.Size - 1
		If File.IsDirectory(folder,lst.Get(i)) Then
			Dim v As String
			v = folder&"/"&lst.Get(i)
			'Log("v="&v)
			ffolders.Add(v.SubString(root1.Length+1))
			If recursive Then
				ReadDir(v,recursive)
			End If
		Else
			ffiles.Add(folder&"/"&lst.Get(i))
		End If
	Next
	'Log(ffolders.Size&" Ordner / "&ffiles.Size&" Dateien")
End Sub

Sub FormatFileSize(Bytes As Float) As String
   
	Private Unit() As String = Array As String(" Byte", " KB", " MB", " GB", " TB", " PB", " EB", " ZB", " YB")
   
	If Bytes = 0 Then
                    
		Return "0 Bytes"
    
	Else
       
		Private Po, Si As Double
		Private I As Int
       
		Bytes = Abs(Bytes)
                            
		I = Floor(Logarithm(Bytes, 1024))
		Po = Power(1024, I)
		Si = Bytes / Po
       
		Return NumberFormat(Si, 1, 2) & Unit(I)
       
	End If
   
End Sub

Sub Label1_Click
	StartActivity(sys)
	SetAnimation.setanimati("extra_in", "extra_out")
End Sub

Sub Button1_Click
	If slm.IsSidebarVisible Then 
		slm.CloseSidebar
	Else
	slm.OpenSidebar
	End If 
End Sub

Sub cl_click As Boolean
	Dim res As Int 
	res=Msgbox2(cs.Initialize.Alignment("ALIGN_CENTER").Append($"App wird geschlossen Service Icon läuft im Hintergrund Prozess weiter und wird als Info weiterhin in der statusbar ausgeführt., zum deaktivieren bitte 'Settings->Start/stop Notify Service'.!","Bat-CaT beenden:"$).PopAll, _
cs.Initialize.Typeface(Typeface.DEFAULT).Color(0xFF01FF20).Size(40).PopAll,"ja","Abbruch","",LoadBitmap(File.DirAssets,"Power.png"))
	If res=DialogResponse.POSITIVE Then
		Activity.Finish
		SetAnimation.setanimati("extra_in", "extra_out")
	Else
		If res=DialogResponse.CANCEL Then
			ToastMessageShow("zurück..",False)
		End If
	End If
	Return(True)
End Sub

Sub Activity_KeyPress (KeyCode As Int) As Boolean 'Return True to consume the event
	If KeyCode=KeyCodes.KEYCODE_BACK Then
		Activity.Finish
		SetAnimation.setanimati("extra_in", "extra_out")
		ToastMessageShow("BCT - Backround Service",False)
	End If
	Return(True)
End Sub


Sub Button3_Click
	StartActivity(settings)
	SetAnimation.setanimati("extra_in", "extra_out")
End Sub


Sub device_BatteryChanged (level As Int, Scale As Int, Plugged As Boolean, Intent As Intent)
	
	
	'load_check
	Dim val,hours,minutes,rst,ts,volta,vs As Int
	volta=Intent.GetExtra("voltage")/1000
	temp=Intent.GetExtra("temperature")/10
	
	Label1.Visible=True
	File.WriteString(File.DirDefaultExternal&"/mnt/cache","lvl.txt",level)
	File.WriteString(File.DirDefaultExternal&"/mnt/cache","volt.txt",volta)
		
	
	'pr'b1.setProgressText(temp,Intent.GetExtra("temperature"))
	apm.Progress=level
	apm.BottomText=Intent.GetExtra("technology")
	apm.Max=Scale
	rst=Scale-level
	If Plugged=True Then
		lvbat.SetVisibleAnimated(100,True)
		lvbat.startAnim
		'ac_check
		'ims3.Bitmap=LoadBitmap(File.DirAssets,"ic_usb_black_24dp.png")
		apm.BottomText="Aufladen via USB: "&volta&" V"
		'Log("VOLT: "&Intent.GetExtra("voltage"))
		val =rst*Intent.GetExtra("voltage") /1000
		hours = Floor(val / 60)
		minutes = val Mod 60
		If level=100 Then
			lvbat.stopAnim
			lvbat.Value=level
				apm.BottomText="Kabel entfernen(USB)!"
			Label4.Text="Batterie voll! Bitte Kabel entfernen!"
		Else
			
		Label4.Text="voll in: "&hours&"h - "&minutes&"min"
		End If

	Else
		'ims3.Bitmap=LoadBitmap(File.DirAssets,"ic_data_usage_black_48dp.png")
		lvbat.stopAnim
		lvbat.Value=level
		'lvbat.SetVisibleAnimated(50,False)
		If level<=5 Then
			Label1.TextColor=Colors.Red
			Label1.TextSize=15
			Label1.Text="Akku laden!"
			apm.UnfinishedStrokeColor=mcl.md_red_200
			apm.FinishedStrokeColor=mcl.md_amber_100
		End If
		'Log("RM -> "&ConvertToTimeFormat(rm))
		Dim vol As Int 
		vol=Intent.GetExtra("voltage")
		Dim days As Int
		val =Scale/vol*level*1000
		days=Floor(val/60/24)
		hours = Floor(val/60 Mod 24)
		minutes = val Mod 60
		Label4.Text= "noch: "&days&"d - "&hours&"h - "&minutes&"m"
	End If
	If temp<41 Then
		store_check

	End If
	If temp>41 Then
		apm.FinishedStrokeColor=mcl.md_amber_A700

	End If
	If temp >49 Then
		apm.FinishedStrokeColor=mcl.md_red_A700
	
	End If
End Sub


Sub minutes_hours ( ms As Int ) As String
	Dim val,hours,minutes As Int 
	val = ms
	hours = Floor(val / 60)
	minutes = val Mod 60
	Return NumberFormat(hours, 1, 0) & ":" & NumberFormat(minutes, 2, 0)
End Sub 

Sub Label4_Click
	StartActivity(sys)
End Sub

Sub fc_CopyDone(Key As String, Error As Boolean)
			
End Sub

Sub GetFileName(FullPath As String) As String
	Return FullPath.SubString(FullPath.LastIndexOf("/")+1)
End Sub

Sub cli_click
	'lis.Add("Optimierung "&date&", "&time)
	StartActivity(cool)
End Sub

Sub GetParentPath(Path As String) As String
	Dim Path1 As String
	If Path = "/" Then
		Return "/"
	End If
	L = Path.LastIndexOf("/")
	If L = Path.Length - 1 Then
		'Strip the last slash
		Path1 = Path.SubString2(0,L)
	Else
		Path1 = Path
	End If
	L = Path.LastIndexOf("/")
	If L = 0 Then
		L = 1
	End If
	Return Path1.SubString2(0,L)
End Sub

Sub GetActivitiesInfo(package As String) As Object
	Dim r As Reflector
	r.Target = r.GetContext
	r.Target = r.RunMethod("getPackageManager")
	r.Target = r.RunMethod3("getPackageInfo", package, "java.lang.String", 0x00000001, "java.lang.int")
	Return r.GetField("applicationInfo")
End Sub

Sub GetSourceDir(AppInfo As Object) As String
	Try
		Dim r As Reflector
		r.Target = AppInfo
		Return r.GetField("sourceDir")
	Catch
		Return ""
	End Try
End Sub

#If Java

import android.Manifest;
import android.accounts.Account;
import android.accounts.AccountManager;
import android.annotation.TargetApi;
import android.bluetooth.BluetoothAdapter;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.location.Location;
import android.location.LocationManager;
import android.media.AudioManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.net.wifi.WifiManager;
import android.os.BatteryManager;
import android.os.Build;
import android.provider.Settings;
import android.telephony.TelephonyManager;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.MotionEvent;
import android.view.WindowManager;
import android.webkit.WebView;
//import com.google.android.gms.ads.identifier.AdvertisingIdClient;
//import com.google.android.gms.common.GooglePlayServicesNotAvailableException;
//import com.google.android.gms.common.GooglePlayServicesRepairableException;
import java.io.File;
import java.io.IOException;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.util.Collections;
import java.util.List;
import java.util.Locale;
import java.util.UUID;

  //private final Context context;
  private TelephonyManager tm; // = (TelephonyManager) BA.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
  private String initialVal = "";

  public int RINGER_MODE_SILENT = 0;
  public int RINGER_MODE_NORMAL = 1;
  public int RINGER_MODE_VIBRATE = 2;

  /**
   * The constant LOGTAG.
   */
  //private static final String LOGTAG = "EasyDeviceInfo";


  /**
   * Instantiates a new Easy device info.
   *
   * @param context the context
   */
//  public EasyDeviceInfo(Context context) {
//    this.context = context;
//    tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
//    initialVal = "na";
//  }

  /**
   * Gets library version.
   *
   * @return the library version
   */
//  public String getLibraryVersion() {
//    String version = "1.1.9";
//    int versionCode = 11;
//    return version + "-" + versionCode;
//  }

  /**
   * Gets android id.
   *
   * @return the android id
   */
  public String getAndroidID() {
    String result = initialVal;
    try {
      result = Settings.Secure.getString(BA.applicationContext.getContentResolver(), Settings.Secure.ANDROID_ID);
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }
  
  
   /**
   * Gets model.
   *
   * @return the model
   */
  public String getModel() {
    String result = initialVal;
    try {
      result = Build.MODEL;
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return handleIllegalCharacterInResult(result);
  } 


  /**
   * Gets build brand.
   *
   * @return the build brand
   */
  public String getBuildBrand() {
    String result = initialVal;
    try {
      result = Build.BRAND;
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return handleIllegalCharacterInResult(result);
  }

  /**
   * Gets build host.
   *
   * @return the build host
   */
  public String getBuildHost() {
    String result = initialVal;
    try {
      result = Build.HOST;
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }

  /**
   * Gets build tags.
   *
   * @return the build tags
   */
  public String getBuildTags() {
    String result = initialVal;
    try {
      result = Build.TAGS;
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }
  
  
  /**
   * Gets build time.
   *
   * @return the build time
   */
  public long getBuildTime() {
    long result = 0;
    try {
      result = Build.TIME;
    } catch (Exception e) {
      e.printStackTrace();
    }
    return result;
  }  
  
  /**
   * Gets build user.
   *
   * @return the build user
   */
  public String getBuildUser() {
    String result = initialVal;
    try {
      result = Build.USER;
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }  
  
  /**
   * Gets build version release.
   *
   * @return the build version release
   */
  public String getBuildVersionRelease() {
    String result = initialVal;
    try {
      result = Build.VERSION.RELEASE;
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }  
  
  
    /**
   * Gets screen display id.
   *
   * @return the screen display id
   */
  public String getScreenDisplayID() {
    String result = initialVal;
    try {
      WindowManager wm = (WindowManager) BA.applicationContext.getSystemService(Context.WINDOW_SERVICE);
      Display display = wm.getDefaultDisplay();
      result = String.valueOf(display.getDisplayId());
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }  
  
  /**
   * Gets build version codename.
   *
   * @return the build version codename
   */
  public String getBuildVersionCodename() {
    String result = initialVal;
    try {
      result = Build.VERSION.CODENAME;
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }
  
  /**
   * Gets build version incremental.
   *
   * @return the build version incremental
   */
  public String getBuildVersionIncremental() {
    String result = initialVal;
    try {
      result = Build.VERSION.INCREMENTAL;
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }
  

  /**
   * Gets build version sdk.
   *
   * @return the build version sdk
   */
  public int getBuildVersionSDK() {
    int result = 0;
    try {
      result = Build.VERSION.SDK_INT;
    } catch (Exception e) {
      e.printStackTrace();
    }
    return result;
  }
  

  /**
   * Gets build id.
   *
   * @return the build id
   */
  public String getBuildID() {
    String result = initialVal;
    try {
      result = Build.ID;
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }  
        
  /**
   * Is Device rooted boolean
   *
   * @return the boolean
   */
  public boolean isDeviceRooted() {
    String su = "su";
    String[] locations = {
        "/sbin/", "/system/bin/", "/system/xbin/", "/system/sd/xbin/", "/system/bin/failsafe/",
        "/data/local/xbin/", "/data/local/bin/", "/data/local/"
    };
    for (String location : locations) {
      if (new File(location + su).exists()) {
        return true;
      }
    }
    return false;
  }
  

  /**
   * Get supported abis string [ ].
   *
   * @return the string [ ]
   */
  public String[] getSupportedABIS() {
    String[] result = new String[] { "-" };
    try {
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
        result = Build.SUPPORTED_ABIS;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length == 0) {
      result = new String[] { "-" };
    }
    return result;
  }
  


  /**
   * Gets string supported abis.
   *
   * @return the string supported abis
   */
  public String getStringSupportedABIS() {
    String result = initialVal;
    try {
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
        String[] supportedABIS = Build.SUPPORTED_ABIS;

        StringBuilder supportedABIString = new StringBuilder();
        if (supportedABIS.length > 0) {
          for (String abis : supportedABIS) {
            supportedABIString.append(abis).append("_");
          }
          supportedABIString.deleteCharAt(supportedABIString.lastIndexOf("_"));
        } else {
          supportedABIString.append(initialVal);
        }
        result = supportedABIString.toString();
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return handleIllegalCharacterInResult(result);
  }  
  
  
   /**
   * Gets string supported 32 bit abis.
   *
   * @return the string supported 32 bit abis
   */
  public String getStringSupported32bitABIS() {
    String result = initialVal;
    try {
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
        String[] supportedABIS = Build.SUPPORTED_32_BIT_ABIS;

        StringBuilder supportedABIString = new StringBuilder();
        if (supportedABIS.length > 0) {
          for (String abis : supportedABIS) {
            supportedABIString.append(abis).append("_");
          }
          supportedABIString.deleteCharAt(supportedABIString.lastIndexOf("_"));
        } else {
          supportedABIString.append(initialVal);
        }

        result = supportedABIString.toString();
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }

    return handleIllegalCharacterInResult(result);
  } 
  
  
  /**
   * Gets manufacturer.
   *
   * @return the manufacturer
   */
  public String getManufacturer() {
    String result = initialVal;
    try {
      result = Build.MANUFACTURER;
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return handleIllegalCharacterInResult(result);
  }  
  
  
  
   /**
   * Gets resolution.
   *
   * @return the resolution
   */
  public String getResolution() {
    String result = initialVal;
    try {
      WindowManager wm = (WindowManager) BA.applicationContext.getSystemService(Context.WINDOW_SERVICE);

      Display display = wm.getDefaultDisplay();

      DisplayMetrics metrics = new DisplayMetrics();
      display.getMetrics(metrics);
      result = metrics.heightPixels + "x" + metrics.widthPixels;
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result.length() == 0) {
      result = initialVal;
    }
    return result;
  } 
  

  /**
   * Gets carrier.
   *
   * @return the carrier
   */
  public String getCarrier() {
    String result = initialVal;
	tm = (TelephonyManager) BA.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
    try {
      if (tm != null && tm.getPhoneType() != TelephonyManager.PHONE_TYPE_CDMA) {
        result = tm.getNetworkOperatorName().toLowerCase(Locale.getDefault());
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result.length() == 0) {
      result = initialVal;
    }
    return handleIllegalCharacterInResult(result);
  }
  
  
  /**
   * Gets device.
   *
   * @return the device
   */
  public String getDevice() {
    String result = initialVal;
    try {
      result = Build.DEVICE;
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }  
  
  
  /**
   * Gets bootloader.
   *
   * @return the bootloader
   */
  public String getBootloader() {
    String result = initialVal;
    try {
      result = Build.BOOTLOADER;
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }  
  
  
  /**
   * Gets board.
   *
   * @return the board
   */
  public String getBoard() {
    String result = initialVal;
    try {
      result = Build.BOARD;
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }  
  
  
  /**
   * Gets display version.
   *
   * @return the display version
   */
  public String getDisplayVersion() {
    String result = initialVal;
    try {
      result = Build.DISPLAY;
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }  
  
  
   /**
   * Gets language.
   *
   * @return the language
   */
  public String getLanguage() {
    String result = initialVal;
    try {
      result = Locale.getDefault().getLanguage();
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }

  /**
   * Gets country.
   *
   * @return the country
   */
  public String getCountry() {
    String result = initialVal;
	tm = (TelephonyManager) BA.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
    try {
      if (tm.getSimState() == TelephonyManager.SIM_STATE_READY) {
        result = tm.getSimCountryIso().toLowerCase(Locale.getDefault());
      } else {
        Locale locale = Locale.getDefault();
        result = locale.getCountry().toLowerCase(locale);
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result.length() == 0) {
      result = initialVal;
    }
    return handleIllegalCharacterInResult(result);
  } 
  
  
  
  /**
   * Gets battery percentage
   *
   * @return the battery percentage
   */
  public int getBatteryPercentage() {
    int percentage = 0;
    Intent batteryStatus = getBatteryStatusIntent();
    if (batteryStatus != null) {
      int level = batteryStatus.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);
      int scale = batteryStatus.getIntExtra(BatteryManager.EXTRA_SCALE, -1);
      percentage = (int) ((level / (float) scale) * 100);
    }

    return percentage;
  }

  /**
   * Is device charging boolean.
   *
   * @return is battery charging boolean
   */
  public boolean isDeviceCharging() {
    Intent batteryStatus = getBatteryStatusIntent();
    int status = batteryStatus.getIntExtra(BatteryManager.EXTRA_STATUS, -1);
    return (status == BatteryManager.BATTERY_STATUS_CHARGING
        || status == BatteryManager.BATTERY_STATUS_FULL);
  }

  /**
   * Is device charging usb boolean.
   *
   * @return is battery charging via USB boolean
   */
  public boolean isDeviceChargingUSB() {
    Intent batteryStatus = getBatteryStatusIntent();
    int chargePlug = batteryStatus.getIntExtra(BatteryManager.EXTRA_PLUGGED, -1);
    return (chargePlug == BatteryManager.BATTERY_PLUGGED_USB);
  }

  /**
   * Is device charging ac boolean.
   *
   * @return is battery charging via AC boolean
   */
  public boolean isDeviceChargingAC() {
    Intent batteryStatus = getBatteryStatusIntent();
    int chargePlug = batteryStatus.getIntExtra(BatteryManager.EXTRA_PLUGGED, -1);
    return (chargePlug == BatteryManager.BATTERY_PLUGGED_AC);
  }  
  
  
   /**
   * Gets network type.
   *
   * @return the network type
   */
  public String getNetworkType() {
    int networkStatePermission =
        BA.applicationContext.checkCallingOrSelfPermission(Manifest.permission.ACCESS_NETWORK_STATE);

    String result = initialVal;

    if (networkStatePermission == PackageManager.PERMISSION_GRANTED) {
      try {
        ConnectivityManager cm =
            (ConnectivityManager) BA.applicationContext.getSystemService(Context.CONNECTIVITY_SERVICE);

        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();
        if (activeNetwork == null) {
          result = "Unknown";
        } else if (activeNetwork.getType() == ConnectivityManager.TYPE_WIFI
            || activeNetwork.getType() == ConnectivityManager.TYPE_WIMAX) {
          result = "Wifi/WifiMax";
        } else if (activeNetwork.getType() == ConnectivityManager.TYPE_MOBILE) {
          TelephonyManager manager =
              (TelephonyManager) BA.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
          if (manager.getSimState() == TelephonyManager.SIM_STATE_READY) {
            switch (manager.getNetworkType()) {

              // Unknown
              case TelephonyManager.NETWORK_TYPE_UNKNOWN:
                result = "Cellular - Unknown";
                break;
              // Cellular Data–2G
              case TelephonyManager.NETWORK_TYPE_EDGE:
              case TelephonyManager.NETWORK_TYPE_GPRS:
              case TelephonyManager.NETWORK_TYPE_CDMA:
              case TelephonyManager.NETWORK_TYPE_IDEN:
              case TelephonyManager.NETWORK_TYPE_1xRTT:
                result = "Cellular - 2G";
                break;
              // Cellular Data–3G
              case TelephonyManager.NETWORK_TYPE_UMTS:
              case TelephonyManager.NETWORK_TYPE_HSDPA:
              case TelephonyManager.NETWORK_TYPE_HSPA:
              case TelephonyManager.NETWORK_TYPE_HSPAP:
              case TelephonyManager.NETWORK_TYPE_HSUPA:
              case TelephonyManager.NETWORK_TYPE_EVDO_0:
              case TelephonyManager.NETWORK_TYPE_EVDO_A:
              case TelephonyManager.NETWORK_TYPE_EVDO_B:
                result = "Cellular - 3G";
                break;
              // Cellular Data–4G
              case TelephonyManager.NETWORK_TYPE_LTE:
                result = "Cellular - 4G";
                break;
              // Cellular Data–Unknown Generation
              default:
                result = "Cellular - Unknown Generation";
                break;
            }
          }
        }
      } catch (Exception e) {
        e.printStackTrace();
      }
    }
    if (result.length() == 0) {
      result = initialVal;
    }
    return handleIllegalCharacterInResult(result);
  } 
  
  
  
  /**
   * Gets os codename.
   *
   * @return the os codename
   */
  public String getOSCodename() {
    String codename = initialVal;
    switch (Build.VERSION.SDK_INT) {
      case Build.VERSION_CODES.BASE:
        codename = "First Android Version. Yay !";
        break;
      case Build.VERSION_CODES.BASE_1_1:
        codename = "Base Android 1.1";
        break;
      case Build.VERSION_CODES.CUPCAKE:
        codename = "Cupcake";
        break;
      case Build.VERSION_CODES.DONUT:
        codename = "Donut";
        break;
      case Build.VERSION_CODES.ECLAIR:
      case Build.VERSION_CODES.ECLAIR_0_1:
      case Build.VERSION_CODES.ECLAIR_MR1:

        codename = "Eclair";
        break;
      case Build.VERSION_CODES.FROYO:
        codename = "Froyo";
        break;
      case Build.VERSION_CODES.GINGERBREAD:
      case Build.VERSION_CODES.GINGERBREAD_MR1:
        codename = "Gingerbread";
        break;
      case Build.VERSION_CODES.HONEYCOMB:
      case Build.VERSION_CODES.HONEYCOMB_MR1:
      case Build.VERSION_CODES.HONEYCOMB_MR2:
        codename = "Honeycomb";
        break;
      case Build.VERSION_CODES.ICE_CREAM_SANDWICH:
      case Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1:
        codename = "Ice Cream Sandwich";
        break;
      case Build.VERSION_CODES.JELLY_BEAN:
      case Build.VERSION_CODES.JELLY_BEAN_MR1:
      case Build.VERSION_CODES.JELLY_BEAN_MR2:
        codename = "Jelly Bean";
        break;
      case Build.VERSION_CODES.KITKAT:
        codename = "Kitkat";
        break;
      case Build.VERSION_CODES.KITKAT_WATCH:
        codename = "Kitkat Watch";
        break;
      case Build.VERSION_CODES.LOLLIPOP:
      case Build.VERSION_CODES.LOLLIPOP_MR1:
        codename = "Lollipop";
        break;
      case Build.VERSION_CODES.M:
        codename = "Marshmallow";
        break;
    }
    return codename;
  }  
  
  
  /**
   * Gets os version.
   *
   * @return the os version
   */
  public String getOSVersion() {
    String result = initialVal;
    try {
      result = Build.VERSION.RELEASE;
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }  


  /**
   * Gets wifi mac.
   *
   * @return the wifi mac
   */
  @SuppressWarnings("MissingPermission") public String getWifiMAC() {
    String result = initialVal;
    try {

      if (BA.applicationContext.checkCallingOrSelfPermission(Manifest.permission.ACCESS_WIFI_STATE)
          == PackageManager.PERMISSION_GRANTED) {

        WifiManager wm = (WifiManager) BA.applicationContext.getSystemService(Context.WIFI_SERVICE);
        result = wm.getConnectionInfo().getMacAddress();
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }
  
  
  /**
   * Gets imei.
   *
   * @return the imei
   */
  public String getIMEI() {
    tm = (TelephonyManager) BA.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
    String result = initialVal;
    boolean hasReadPhoneStatePermission =
        BA.applicationContext.checkCallingOrSelfPermission(Manifest.permission.READ_PHONE_STATE)
            == PackageManager.PERMISSION_GRANTED;
    try {
      if (hasReadPhoneStatePermission) result = tm.getDeviceId();
    } catch (Exception e) {
      e.printStackTrace();
    }

    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }  
  
  
  /**
   * Gets imsi.
   *
   * @return the imsi
   */
  public String getIMSI() {
    String result = initialVal;
	tm = (TelephonyManager) BA.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
    boolean hasReadPhoneStatePermission =
        BA.applicationContext.checkCallingOrSelfPermission(Manifest.permission.READ_PHONE_STATE)
            == PackageManager.PERMISSION_GRANTED;
    try {
      if (hasReadPhoneStatePermission) result = tm.getSubscriberId();
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }  
  
  
  /**
   * Gets serial.
   *
   * @return the serial
   */
  public String getSerial() {
    String result = initialVal;
    try {
      result = Build.SERIAL;
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }

  /**
   * Gets sim serial.
   *
   * @return the sim serial
   */
  public String getSIMSerial() {
    String result = initialVal;
	tm = (TelephonyManager) BA.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
    try {
      result = tm.getSimSerialNumber();
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }  
  
  
  /**
   * Gets gsfid.
   *
   * @return the gsfid
   */
  public String getGSFID() {
    final Uri URI = Uri.parse("content://com.google.android.gsf.gservices");
    final String ID_KEY = "android_id";

    String[] params = { ID_KEY };
    Cursor c = BA.applicationContext.getContentResolver().query(URI, null, null, params, null);

    if (c == null) {
      return initialVal;
    } else if (!c.moveToFirst() || c.getColumnCount() < 2) {
      c.close();
      return initialVal;
    }

    try {
      String gsfID = Long.toHexString(Long.parseLong(c.getString(1)));
      c.close();
      return gsfID;
    } catch (NumberFormatException e) {
      c.close();
      return initialVal;
    }
  }

  /**
   * Gets bluetooth mac.
   *
   * @return the bluetooth mac
   */
  @SuppressWarnings("MissingPermission") public String getBluetoothMAC() {
    String result = initialVal;
    try {
      if (BA.applicationContext.checkCallingOrSelfPermission(Manifest.permission.BLUETOOTH)
          == PackageManager.PERMISSION_GRANTED) {
        BluetoothAdapter bta = BluetoothAdapter.getDefaultAdapter();
        result = bta.getAddress();
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }  
  
  
  /**
   * Gets psuedo unique id.
   *
   * @return the psuedo unique id
   */
  public String getPsuedoUniqueID() {
    // If all else fails, if the user does have lower than API 9 (lower
    // than Gingerbread), has reset their phone or 'Secure.ANDROID_ID'
    // returns 'null', then simply the ID returned will be solely based
    // off their Android device information. This is where the collisions
    // can happen.
    // Try not to use DISPLAY, HOST or ID - these items could change.
    // If there are collisions, there will be overlapping data
    String devIDShort = "35" +
        (Build.BOARD.length() % 10) + (Build.BRAND.length() % 10);

    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
      devIDShort += (Build.SUPPORTED_ABIS[0].length() % 10);
    } else {
      devIDShort += (Build.CPU_ABI.length() % 10);
    }

    devIDShort +=
        (Build.DEVICE.length() % 10) + (Build.MANUFACTURER.length() % 10) + (Build.MODEL.length()
            % 10) + (Build.PRODUCT.length() % 10);

    // Only devices with API >= 9 have android.os.Build.SERIAL
    // http://developer.android.com/reference/android/os/Build.html#SERIAL
    // If a user upgrades software or roots their phone, there will be a duplicate entry
    String serial;
    try {
      serial = Build.class.getField("SERIAL").get(null).toString();

      // Go ahead and return the serial for api => 9
      return new UUID(devIDShort.hashCode(), serial.hashCode()).toString();
    } catch (Exception e) {
      // String needs to be initialized
      serial = "ESYDV000"; // some value
    }

    // Finally, combine the values we have found by using the UUID class to create a unique identifier
    return new UUID(devIDShort.hashCode(), serial.hashCode()).toString();
  }  
  
  
  /**
   * Gets phone no.
   *
   * @return the phone no
   */
  public String getPhoneNo() {
    String result = initialVal;
	tm = (TelephonyManager) BA.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
    try {
      if (tm.getLine1Number() != null) {
        result = tm.getLine1Number();
        if (result.equals("")) {
          result = initialVal;
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result.length() == 0) {
      result = initialVal;
    }
    return result;
  }

  /**
   * Gets product.
   *
   * @return the product
   */
  public String getProduct() {
    String result = initialVal;
    try {
      result = Build.PRODUCT;
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }  
  
  /**
   * Gets fingerprint.
   *
   * @return the fingerprint
   */
  public String getFingerprint() {
    String result = initialVal;
    try {
      result = Build.FINGERPRINT;
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }

  /**
   * Gets hardware.
   *
   * @return the hardware
   */
  public String getHardware() {
    String result = initialVal;
    try {
      result = Build.HARDWARE;
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }  
  
  
  /**
   * Gets radio ver.
   *
   * @return the radio ver
   */
  public String getRadioVer() {
    String result = initialVal;
    try {

      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
        result = Build.getRadioVersion();
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }

  /**
   * Gets ip address.
   *
   * @param useIPv4 the use i pv 4
   * @return the ip address
   */
  public String getIPAddress(boolean useIPv4) {
    String result = initialVal;
    try {
      List<NetworkInterface> interfaces = Collections.list(NetworkInterface.getNetworkInterfaces());
      for (NetworkInterface intf : interfaces) {
        List<InetAddress> addrs = Collections.list(intf.getInetAddresses());
        for (InetAddress addr : addrs) {
          if (!addr.isLoopbackAddress()) {
            String sAddr = addr.getHostAddress().toUpperCase();
            boolean isIPv4 = addr instanceof Inet4Address;
            if (useIPv4) {
              if (isIPv4) result = sAddr;
            } else {
              if (!isIPv4) {
                int delim = sAddr.indexOf('%'); // drop ip6 port suffix
                result = delim < 0 ? sAddr : sAddr.substring(0, delim);
              }
            }
          }
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }  
  
  
  /**
   * Gets ua.
   *
   * @return the ua
   */
  public String getUA() {
    final String system_ua = System.getProperty("http.agent");
    String result = system_ua;
    try {
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
        result = new WebView(BA.applicationContext).getSettings().getDefaultUserAgent(BA.applicationContext) +
            "__" + system_ua;
      } else {
        result = new WebView(BA.applicationContext).getSettings().getUserAgentString() +
            "__" + system_ua;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result.length() < 0 || result == null) {
      result = system_ua;
    }
    return result;
  }

  /**
   * Get lat long double [ ].
   *
   * @return the double [ ]
   */
  @SuppressWarnings("MissingPermission") @TargetApi(Build.VERSION_CODES.M)
  public double[] getLatLong() {
    boolean hasFineLocationPermission =
        BA.applicationContext.checkCallingOrSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION)
            == PackageManager.PERMISSION_GRANTED ? true : false;
    boolean isGPSEnabled, isNetworkEnabled;

    double[] gps = new double[2];
    gps[0] = 0;
    gps[1] = 0;
    if (hasFineLocationPermission) {
      try {
        LocationManager lm = (LocationManager) BA.applicationContext.getSystemService(Context.LOCATION_SERVICE);

        isGPSEnabled = lm.isProviderEnabled(LocationManager.GPS_PROVIDER);
        isNetworkEnabled = lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER);

        Location net_loc = null, gps_loc = null, final_loc = null;

        if (isGPSEnabled) {
          gps_loc = lm.getLastKnownLocation(LocationManager.GPS_PROVIDER);
        }
        if (isNetworkEnabled) {
          net_loc = lm.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
        }

        if (gps_loc != null && net_loc != null) {
          if (gps_loc.getAccuracy() >= net_loc.getAccuracy()) {
            final_loc = gps_loc;
          } else {
            final_loc = net_loc;
          }
        } else {
          if (gps_loc != null) {
            final_loc = gps_loc;
          } else if (net_loc != null) {
            final_loc = net_loc;
          } else {
            // GPS and Network both are null so try passive
            final_loc = lm.getLastKnownLocation(LocationManager.PASSIVE_PROVIDER);
          }
        }

        if (final_loc != null) {
          gps[0] = final_loc.getLatitude();
          gps[1] = final_loc.getLongitude();
        }

        return gps;
      } catch (Exception e) {
        e.printStackTrace();
      }
    }
    return gps;
  }  
  
  
  /**
   * Gets time.
   *
   * @return the time
   */
  public long getTime() {
    return System.currentTimeMillis();
  }

  /**
   * Gets formatted time.
   *
   * @return the formatted time
   */
  public String getFormatedTime() {

    long millis = System.currentTimeMillis();
    int sec = (int) (millis / 1000) % 60;
    int min = (int) ((millis / (1000 * 60)) % 60);
    int hr = (int) ((millis / (1000 * 60 * 60)) % 24);

    return String.format("%02d:%02d:%02d", hr, min, sec);
  }  
  
  
  /**
   * Gets app name.
   *
   * @return the app name
   */
  public String getAppName() {
    String result;
    final PackageManager pm = BA.applicationContext.getPackageManager();
    ApplicationInfo ai;
    try {
      ai = pm.getApplicationInfo(BA.applicationContext.getPackageName(), 0);
    } catch (PackageManager.NameNotFoundException e) {
      ai = null;
      e.printStackTrace();
    }
    result = (String) (ai != null ? pm.getApplicationLabel(ai) : initialVal);
    return result;
  }

  /**
   * Gets app version.
   *
   * @return the app version
   */
  public String getAppVersion() {
    String result = initialVal;
    try {
      result = BA.applicationContext.getPackageManager().getPackageInfo(BA.applicationContext.getPackageName(), 0).versionName;
    } catch (PackageManager.NameNotFoundException e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }  
  
  /**
   * Gets app version code.
   *
   * @return the app version code
   */
  public String getAppVersionCode() {
    String result = initialVal;
    try {
      result = String.valueOf(
          BA.applicationContext.getPackageManager().getPackageInfo(BA.applicationContext.getPackageName(), 0).versionCode);
    } catch (PackageManager.NameNotFoundException e) {
      e.printStackTrace();
    }
    if (result.length() == 0) {
      result = initialVal;
    }
    return result;
  }

  /**
   * Gets activity name.
   *
   * @return the activity name
   */
  public String getActivityName() {
    String result = initialVal;
    try {
      result = BA.applicationContext.getClass().getSimpleName();
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result.length() == 0) {
      result = initialVal;
    }
    return result;
  }  
  
  
   /**
   * Gets package name.
   *
   * @return the package name
   */
  public String getPackageName() {
    String result = initialVal;
    try {
      result = BA.applicationContext.getPackageName();
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  }

  /**
   * Gets store.
   *
   * @return the store
   */
  public String getStore() {
    String result = initialVal;
    if (Build.VERSION.SDK_INT >= 3) {
      try {
        result = BA.applicationContext.getPackageManager().getInstallerPackageName(BA.applicationContext.getPackageName());
      } catch (Exception e) {
        //Log.i(LOGTAG, "Can't get Installer package");
      }
    }
    if (result == null || result.length() == 0) {
      result = initialVal;
    }
    return result;
  } 
  
  /**
   * Gets density.
   *
   * @return the density
   */
  public String getDensity() {
    String densityStr = initialVal;
    final int density = BA.applicationContext.getResources().getDisplayMetrics().densityDpi;
    switch (density) {
      case DisplayMetrics.DENSITY_LOW:
        densityStr = "LDPI";
        break;
      case DisplayMetrics.DENSITY_MEDIUM:
        densityStr = "MDPI";
        break;
      case DisplayMetrics.DENSITY_TV:
        densityStr = "TVDPI";
        break;
      case DisplayMetrics.DENSITY_HIGH:
        densityStr = "HDPI";
        break;
      case DisplayMetrics.DENSITY_XHIGH:
        densityStr = "XHDPI";
        break;
      case DisplayMetrics.DENSITY_400:
        densityStr = "XMHDPI";
        break;
      case DisplayMetrics.DENSITY_XXHIGH:
        densityStr = "XXHDPI";
        break;
      case DisplayMetrics.DENSITY_XXXHIGH:
        densityStr = "XXXHDPI";
        break;
    }
    return densityStr;
  }  
  
  /**
   * Get accounts string [ ].
   *
   * @return the string [ ]
   */
  @SuppressWarnings("MissingPermission") public String[] getAccounts() {
    try {

      if (BA.applicationContext.checkCallingOrSelfPermission(Manifest.permission.GET_ACCOUNTS)
          == PackageManager.PERMISSION_GRANTED) {
        Account[] accounts = AccountManager.get(BA.applicationContext).getAccountsByType("com.google");
        String[] result = new String[accounts.length];
        for (int i = 0; i < accounts.length; i++) {
          result[i] = accounts[i].name;
        }
        return result;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return null;
  }  
  

  /**
   * Is network available boolean.
   *
   * @return the boolean
   */
  public boolean isNetworkAvailable() {
    if (BA.applicationContext.checkCallingOrSelfPermission(Manifest.permission.INTERNET)
        == PackageManager.PERMISSION_GRANTED
        && BA.applicationContext.checkCallingOrSelfPermission(Manifest.permission.ACCESS_NETWORK_STATE)
        == PackageManager.PERMISSION_GRANTED) {
      ConnectivityManager cm = (ConnectivityManager) BA.applicationContext.getApplicationContext()
          .getSystemService(Context.CONNECTIVITY_SERVICE);
      NetworkInfo netInfo = cm.getActiveNetworkInfo();
      return netInfo != null && netInfo.isConnected();
    }
    return false;
  }

  /**
   * Is running on emulator boolean.
   *
   * @return the boolean
   */
  public static boolean isRunningOnEmulator() {
    return Build.BRAND.contains("generic")
        || Build.DEVICE.contains("generic")
        || Build.PRODUCT.contains("sdk")
        || Build.HARDWARE.contains("goldfish")
        || Build.MANUFACTURER.contains("Genymotion")
        || Build.PRODUCT.contains("vbox86p")
        || Build.DEVICE.contains("vbox86p")
        || Build.HARDWARE.contains("vbox86");
  }  
  


  /**
   * Is wifi enabled
   *
   * @return the boolean
   */
  public boolean isWifiEnabled() {
    boolean wifiState = false;

    WifiManager wifiManager = (WifiManager) BA.applicationContext.getSystemService(Context.WIFI_SERVICE);
    if (wifiManager != null) {
      wifiState = wifiManager.isWifiEnabled() ? true : false;
    }
    return wifiState;
  }

  /**
   * Gets Device Ringer Mode
   *
   * @return Device Ringer Mode
   */
  public int getDeviceRingerMode() {
    int ringerMode = RINGER_MODE_NORMAL;
    AudioManager audioManager = (AudioManager) BA.applicationContext.getSystemService(Context.AUDIO_SERVICE);
    switch (audioManager.getRingerMode()) {
      case AudioManager.RINGER_MODE_NORMAL:
        ringerMode = RINGER_MODE_NORMAL;
        break;
      case AudioManager.RINGER_MODE_SILENT:
        ringerMode = RINGER_MODE_SILENT;
        break;
      case AudioManager.RINGER_MODE_VIBRATE:
        ringerMode = RINGER_MODE_VIBRATE;
    }
    return ringerMode;
  }


  private Intent getBatteryStatusIntent() {
    IntentFilter batFilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
    return BA.applicationContext.registerReceiver(null, batFilter);
  }


  private String handleIllegalCharacterInResult(String result) {
    if (result.indexOf(" ") > 0) {
      result = result.replaceAll(" ", "_");
    }
    return result;
  }



#End If

